package DIP;
// Принцип инверсии зависимостей (Dependency Inversion Principle)

// в данном случае у нас жесткая связь м/у Car и Engine,
// когда в одном классе обращаемся к какому-то Классу помощнику

//public class Engine {
//    // есть метод start
//    public void srart(){
//        System.out.println("Start");
//    }

    // решение в соответствии с принципами DIP

    // из класса делаем абстракцию (интерфейс)
    public interface Engine {
        // описываем  метод start
        void srart();
        // и уже потом делаем наследников DieselEngine и PetrolEngine
        // и все наследники будут работать ч-з абстракцию. Такая связь называется более гибкой
        // проще модифицировать, масштабировать.
        // легко добавить новый Engine
}
